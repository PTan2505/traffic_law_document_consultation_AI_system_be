// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email         String    @unique
  firstName     String
  lastName      String
  password      String
  isAdmin      Boolean   @default(false)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  conversations Conversation[]
  documents     Document[] // Documents uploaded by this admin user
}

model Conversation {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  title     String?
  createdAt DateTime
  createdBy String?
  updatedAt DateTime
  updatedBy String?

  messages  Message[]
}

model Message {
  id             Int           @id @default(autoincrement())
  conversationId Int
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  question       String        @db.Text
  answer         String        @db.Text
  createdAt      DateTime 
  createdBy      String?
  updatedAt      DateTime
  updatedBy      String?
}

model Document {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(255)
  filename         String   @db.VarChar(255) // UUID-based filename on disk
  originalFilename String   @db.VarChar(255) // Original filename from upload
  path             String   @db.VarChar(500)
  type             String   @db.VarChar(10) // 'txt' or 'docx'
  size             Int      // File size in bytes
  isActive         Boolean  @default(false) // Whether this document is currently used by chatbot
  description      String?  @db.Text
  uploadedBy       Int      // Admin user ID who uploaded
  uploader         User     @relation(fields: [uploadedBy], references: [id])
  createdAt        DateTime @default(now())
  createdBy        String?
  updatedAt        DateTime @updatedAt
  updatedBy        String?

  @@map("documents")
}
